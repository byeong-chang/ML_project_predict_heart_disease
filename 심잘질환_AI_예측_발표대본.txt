1
안녕하십니까 저는 팀 우병목의 발표를 맡은 우상욱입니다.
저희는 심장질환 AI 예측 서비스를 구현해보는 프로젝트를 진행했습니다.

2
저희의 목차는 다음과 같습니다.
먼저 프로젝트 개요 설명드리고, EDA, 전처리, 그리고 모델링
이후 웹 서비스 구현과 시연 그리고 프로젝트 마무리 순서로 진행하겠습니다.

3
프로젝트 개요 설명드리겠습니다.

저희는 CDC, 미국 질병관리위원회에서 2020년 40만명의 성인을 대상으로
전화 설문을 통해 심장질환 유무를 수집한 데이터를 캐글에서 찾았습니다.
일단 이 데이터는 기본적으로 전처리가 되어있는 데이터 였고,
저희가 데이터 수집을 하는데에는 그렇게 큰 어려움은 없었습니다.

저희는 이 데이터를 활용해서 머신러닝 모델을 만들고,
이 모델을 활용해서 일반인들이 쉽게 자신의 심장질환을 예측해볼 수 있는
웹을 구현하기로 했습니다.

4
저희가 각자 맡은 역할은 다음과 같습니다.
저희는 머신러닝 모델을 만드는 것에 중점을 뒀기 때문에, 이 부분에는 모든 팀원이 참여했구요
다른 부분은 각자 역할을 나눠서 진행했습니다.

5
개발 환경과 라이브러리는 다음과 같습니다.
저희가 배웠던 라이브러리를 주로 활용했습니다.
그리고 웹구현을 위해서 STREAMLIT이라는 라이브러리를 별도로 활용했습니다.

6
바로 EDA 및 전처리 과정 설명드리겠습니다.
일단 먼저 MISSING NO라는 라이브러리를 활용해서 결측치를 시각화해봤습니다.
이 데이터에는 결측치가 없어서 별도로 처리할 것은 없었습니다.
그리고, 행 별 중복값이 18078개가 발견되어서, 삭제 처리 했습니다.

7
다음은 변수 형태별 분리입니다.
이 데이터에는 총 18가지 속성이 있었구요. 수치형 변수는 4개 그리고
범주형 변수로는 타겟변수 포함해서 총 14개 있었습니다.
저희는 심장질환의 유무를 예측하는 '분류'를 진행하기로 했습니다.
그리고 행의 개수는 총 319,795개, 중복행을 빼면 301,717개 남았었습니다.

8
먼저 범주형 변수의 EDA입니다.
심장질환을 가진 사람에 대해서
나이를 통해서 막대그래프를 만들고, 성별에 따라서 카테고리를 분류했습니다.
보시면 아시다시피, 심장질환을 가진 사람은 나이가 많을 수록, 남자일 수록 더 많은 것으로 보입니다.

9
그리고 담배를 피운 경험이 있는사람은
심장질환을 가진 그룹에서 더 많이 분포가 되어있는 걸 보실수 있습니다.

10
그리고 과음의 경우에는,
과음자 비율이 심장질환을 가진 그룹에 다소 적은 것을 보실 수 있습니다.
이 부분은 저희 팀에서 고민을 했던 부분인데, 심장질환을 가진 사람이
과음을 해서 심장질환에 걸렸을 것이다라는 분석보다는,
심장질환을 가진 사람은 과음을 하기 어렵다라는 분석이 맞다고 생각했습니다.
하지만 여러 모델을 나중에 돌려봤을 때, 특정 조건 하에 과음을 하지 않는다면
심장질환 확률이 떨어지는 부분들이 분명히 보였습니다.
그래서 저희는 이 시각화 자료를 참고 정도로만 사용했습니다.

11
계단을 오를 때 어려움을 느끼는 비율이 높은 분들도, 심장질환을 가진 그룹에서 많이 발견됩니다.

12
심장질환이 있는 분들 중에선, 운동을 하시는 분의 비율이 다소 적습니다.

13
그리고 자신의 건강척도를 주관적으로  판단하는 항목에서도
자신이 건강하지 않다고 생각하는 비율이 조금 높았습니다.

14
뇌졸중을 경험하신 분들도 상대적으로 비율이 높구요

15
당뇨병 경험 비율도 높았습니다

16
물론 천식 비율도 조금 높았습니다

17
그리고 신장질환을 경험해본 비율은 눈에 띌만큼 차이가 나는 걸 보실 수 있습니다.

18
또 피부암을 경험해보신 분들의 비율도 상당히 차이가 나는걸 보실 수 있습니다.

19
수치형 변수를 시각화한 자료입니다.
수치형 변수간의 상관관계를 찍어봤습니다.변수 간의 유의하다고 생각할만한 상관관계가 발견되지 않았습니다.
저희는 이를 통해서 수치형 변수 간 다중공선성에 대한 의심은 일단 배제를 했습니다.

20
BMI의 분포를 시각화한 그래프입니다.
심장질환 유무를 통해 BMI 평균값을 나눠봤는데요.
심장질환을 가지신 분들이 아주 조금 BMI가 높은걸 볼 수 있습니다.

21
하루 평균 몇시간 씩 자는지에 대한 SleepTime 평균값은
심장질환을 걸린 분들이 아주 미세하게 자는 시간이 많은걸 알 수 있습니다.

22
그리고 30일간 신체가 건강하지 못했다고 생각한 변수의 경우에는
심장질환이 있는 분들이 압도적으로 해당 일 수가 많은 것으로 보입니다.

23
그리고 30일간 정신이 건강하지 못했다고 생각한 변수의 경우에는
심장질환이 있는 분들이 해당 일수가 조금 많은 것으로 보입니다.


24
다음은 연속형 변수의 이상치를 박스플롯으로 나타낸 시각화 자료입니다.

25
일단 BMI가 70을 넘어서는 사람들의 경우엔, 심질환자의 비율이 상승세에서 갑자기 낮아지는 것을 보고 
이상치로 판단 후 삭제하려 했는데, 모델에 들어갔을 때 예측 성능이 많이 낮아져서 제거 하지 않았습니다.

26
그리고 SleepTime에 대해서 20시간 이상 수면한 집단을 시각화 했을 때 심질환 비율이 기존그룹에 비해 약 두배가량 차이가 나서 , 
보수적으로 24시간 잤다고 응답한 분들만 이상치로 판단 후 삭제를 했었습니다. 
그런데 이 또한 예측 성능이 하락되면서, 제거하지 않았습니다.

27
다음으론 모델링입니다.
저희 데이터의 14개의 범주형 변수들 중 Yes or No와 같이 유니크 값이 2개인 경우는 라벨인코딩을 진행했고,
유니크 값이 3개 이상인 경우에는 원핫 인코딩을 진행했습니다..


28
저희가 가진 데이터는 심질환자가 아닌 분들이 8배 정도로 압도적으로 많기 때문에,
타겟변수 자체가 불균형이 있는 데이터입니다.
그래서 저희는 약 30만개의 기존데이터와, SMOTE 기법으로 처리하여 약 55만개로 오버샘플링된 데이터,
그리고 언더 샘플링과 오버샘플링을 동시에 진행하는 SMOTEOMEK 기법으로 처리하여
약 25만개의 데이터로 샘플링된 3가지 데이터를 각 모델에 넣고 비교를 해봤습니다.

29
각 모델의 파라미터는 디폴트값으로 예측을 진행했고, KFOLD 5회로 예측 성능을 비교했습니다. 
그 결과 대부분의 상위권 모델들은 SMOTE가 적용된 데이터가 성능이 좋았습니다.

30
저희는 여기서 accuracy 지표와 과적합 여부를 판단 후에 상위 모델 2개를 선정했습니다. SMOTE 데이터를 적용한, 
CATBOOST와 XGBOOST를 상위 모델로 선정하였습니다.

31
이후 저희는 이 두 모델을 하이퍼파라미터 튜닝을 진행했습니다.
저희가 평가지표로 정확도 외에 재현율을 선택한 이유는
심질환자가 맞는데 아니라고 예측했을 경우, 이 모델에 치명적인 단점이 될 수 있기 때문에,
정확도와 함께 중요지표로 선정했습니다.
보시다시피 CATBOOST의 튜닝 결과, TEST 데이터에서의 정확도가
0.0032 정도 증가했으며 재현율은 0.0086 증가했음을 볼수 있습니다.
XGBOOST의 튜닝 결과 TEST 데이터에서의 정확도가
0.0093 증가했고, 재현율은 0.0109 증가했습니다

32
앞서 튜닝된 모델중 CATBOOST로 특성선택을 진행해보려했습니다.
저희가 가지고 있던 모델 중에 CATBOOST, XGBOOST, RANDOMFOREST에서 추출한 특성 중요도를 바탕으로 
저희 팀에서 특성 중요도 하위 독립변수 4개를 선정했습니다.
4개는 RACE, GENHEALTH, DIABETIC, MENTALHEALTH 였습니다.

33
하지만 튜닝된 모델로 특성하나씩을 DROP 하면서 예측해봤는데, 저희가 생각하는 중요 지표 정확도, 
재현율에서 어떤 변수도 삭제하지 않은 평가지표가 가장 좋았습니다. 따라서 저희는 따로 특성선택을 진행하지 않았습니다. 

34
이후 해당 데이터로 앞서 튜닝해둔 CATBOOST와 XGBOOST 모델을 활용해서 소프트 보팅 분류기를 만들었습니다. 
결과는 앞서 이야기했던 CATBOOST와 XGBOOST 튜닝 모델보다 더 좋은 성능을 보임을 알 수 있습니다.
스태킹도 진행해보려했는데, 시간관계상 진행하지 못했습니다.

35. soft voting 의 평가지표가 유의미하게 높은것을 알수 있지만  웹에 voting 모델을 로드하는 것에 기술적 한계가 있었습니다.
그래서 CATBOOST 튜닝모델과 XGBOOST 튜닝 모델 중 평가지표가 더 좋았던 XGBOOST로 웹을 구현했습니다.

36
다음은 웹구현입니다.
저희는 웹에서 모델에 들어가는 독립변수와 관계된 사용자의 정보를 입력받고, 그 정보를 기반으로 조금 가공을 해서
모델 기반 예측을 하는 형태입니다. 예측값을 기반으로 시각화 자료를 출력합니다.

37
저희가 모델을 웹에 적용하려했을 때, 웹이 동작할 때마다 데이터를 학습시켜야해서, 이 부분이 매우 불필요하다고 생각했습니다. 
강사님께 질문한 결과 모델을 저장하는 방법이 있었고, 해당 방법은 JOBLIB 라이브러리를 통해서 학습된 모델 자체를 파일 형태로 
저장하고, 불러 쓰는 방법입니다. 이 방법은 혹시라도 질문이 있으시다면 좀 더 자세히 설명드리겠습니다.

38
저희가 예측한 결과를 보여줄 때, 심장질환이 있을 확률을 뽑아내는건
저희가 배운 PREDICT_PROBA의 확률값을 사용했습니다.
그리고 심장질환을 가졌다. 안가졌다의 경우에는 PREDICT 값을 확인했습니다.

39
그리고 다음으로 사용자의 개선방향을 도출해주는 방법은
사용자가 입력한 정보에서 일정 변수들을 하나씩 조작해서 PREDICT_PROBA의 확률 값을 가지고 있습니다.
그 이후에서 기존 예측된 확률과 비교해서 심장질환일 확률이
낮아졌다면 그 변수에 대해서 확률과 함께 자료를 출력합니다.

이 외에도 심장질환자 일 경우와, 심장질환자가 아닐 경우 예측 결과에 따라서 관련 유튜브 영상을 띄워줍니다.

40
사실 웹을 직접 보시면, 이해가 빠를 것 같아서 QR코드로 준비했습니다.
모든 분들이 접속하시거나 링크를 보내드릴테니 확인해보시면서
발표 들어주시면 되겠습니다.

41
저희가 느낀 한계점은~ (그대로 읽기)

42
팀원별 느낀점은 다음과 같습니다. 넘어가겠습니다.

43.
질문 받겠습니다.


42
감사합니다. 질문 받겠습니다.